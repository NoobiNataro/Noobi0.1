import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import json
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = '7750051518:AAHxzSGc9EERe-R1Ar0T2_axZwA-dVDsWqk'
bot = Bot(token=BOT_TOKEN, timeout=60, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = ['7750051518', '6083725019', '7724844551']
DATABASE_FILE = 'database.json'

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class VideoUpload(StatesGroup):
    waiting_for_video = State()
    waiting_for_description = State()

class BugReport(StatesGroup):
    waiting_for_description = State()

class UpdatePost(StatesGroup):
    waiting_for_version = State()
    waiting_for_description = State()
    waiting_for_confirmation = State()

class CombineVideos(StatesGroup):
    waiting_for_episode_count = State()
    waiting_for_videos = State()
    waiting_for_title = State()

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
REQUIRED_CHANNELS = [
    {'channel': 'drametick', 'link': 'https://t.me/drametick', 'name': 'Drametick'},
    {'channel': 'animatsie', 'link': 'https://t.me/animatsie', 'name': 'Animatsie'},
    {'channel': 'persiaofikals', 'link': 'https://t.me/persiaofikals', 'name': 'Persia Ofikals'},
    {'channel': 'filmofikalss', 'link': 'https://t.me/filmofikalss', 'name': 'Film Ofikalss'}
]

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def load_data():
    try:
        if os.path.exists(DATABASE_FILE):
            with open(DATABASE_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                for key, default in [('videos', {}), ('users', {}), ('updates', []), 
                                   ('forwarded_videos', {}), ('combined_videos', {})]:
                    if key not in data:
                        data[key] = default
                return data
        return {'videos': {}, 'users': {}, 'updates': [], 'forwarded_videos': {}, 'combined_videos': {}}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {'videos': {}, 'users': {}, 'updates': [], 'forwarded_videos': {}, 'combined_videos': {}}

def save_data(data):
    with open(DATABASE_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

db = load_data()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_admin(user_id: int) -> bool:
    return str(user_id) in ADMIN_IDS

def get_admin_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìπ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="upload_video"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
        InlineKeyboardButton("üÜï –î–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data="add_update"),
        InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", callback_data="show_updates"),
        InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="users_list"),
        InlineKeyboardButton("üîó –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="combine_videos"),
        InlineKeyboardButton("‚ùì FAQ", callback_data="admin_faq"),
        InlineKeyboardButton("üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="admin_instruction")
    )
    return keyboard

def get_user_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", callback_data="show_updates"),
        InlineKeyboardButton("üêõ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ", callback_data="report_bug"),
        InlineKeyboardButton("üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="show_instruction")
    )
    return keyboard

def get_subscription_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    for channel in REQUIRED_CHANNELS:
        keyboard.add(InlineKeyboardButton(f"üì¢ {channel['name']}", url=channel['link']))
    keyboard.add(InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"))
    return keyboard

def register_user(user):
    user_id = str(user.id)
    if user_id not in db['users']:
        db['users'][user_id] = {
            'id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'join_date': datetime.now().isoformat(),
            'is_banned': False
        }
        save_data(db)

async def check_subscriptions(user_id):
    if is_admin(user_id):
        return True
    for channel in REQUIRED_CHANNELS:
        try:
            member = await bot.get_chat_member('@' + channel['channel'], user_id)
            if member.status == 'left':
                return False
        except Exception:
            return False
    return True

def format_update_message(update_data):
    return f"""
üì¢ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update_data['version']}*
üìÖ {update_data['date']}

{update_data['description']}
"""

async def broadcast_update(update_data):
    for user_id in db['users']:
        if not db['users'][user_id]['is_banned']:
            try:
                await bot.send_message(user_id, format_update_message(update_data), parse_mode="Markdown")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = str(message.from_user.id)
    register_user(message.from_user)
    
    if is_admin(message.from_user.id):
        await message.answer("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())
        return

    if db['users'][user_id]['is_banned']:
        await message.answer("‚õîÔ∏è –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –±–æ—Ç–µ.")
        return

    args = message.get_args()
    if args.startswith('video_'):
        video_data = db['videos'].get(args)
        if video_data:
            try:
                await bot.send_video(
                    chat_id=message.chat.id,
                    video=video_data['file_id'],
                    caption=f"üìπ {video_data.get('title', '')}\n\n{video_data.get('description', '')}\n\n‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è",
                    parse_mode="HTML",
                    protect_content=True
                )
                video_data['views'] = video_data.get('views', 0) + 1
                save_data(db)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await message.answer("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ.")
        return
    elif args.startswith('combined_'):
        try:
            combined_data = db['combined_videos'].get(args)
            if combined_data:
                keyboard = InlineKeyboardMarkup(row_width=3)
                for i in range(1, combined_data['episode_count'] + 1):
                    keyboard.insert(
                        InlineKeyboardButton(
                            str(i),
                            callback_data=f"show_ep_{args.split('_')[1]}_{i}"
                        )
                    )
                await message.answer(
                    f"üìö –ù–∞–±–æ—Ä: {combined_data['title']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —ç–ø–∏–∑–æ–¥:",
                    reply_markup=keyboard
                )
            else:
                await message.answer("‚ùå –ù–∞–±–æ—Ä –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–±–æ—Ä–∞ –≤–∏–¥–µ–æ: {e}", exc_info=True)
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–±–æ—Ä–∞ –≤–∏–¥–µ–æ.")
        return

    is_subscribed = await check_subscriptions(message.from_user.id)
    if not is_subscribed:
        welcome_text = """
üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PERSIABOT!

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:
‚Ä¢ @drametick
‚Ä¢ @animatsie
‚Ä¢ @persiaofikals
‚Ä¢ @filmofikalss

–ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏.
"""
        await message.answer(welcome_text, reply_markup=get_subscription_keyboard())
    else:
        await message.answer("üé¨ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_user_keyboard())

@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def check_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    if is_admin(user_id):
        await callback_query.answer("‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø")
        return
        
    is_subscribed = await check_subscriptions(user_id)
    
    if is_subscribed:
        await callback_query.message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É!", reply_markup=get_user_keyboard())
    else:
        not_subscribed = [channel['name'] for channel in REQUIRED_CHANNELS 
                         if (await bot.get_chat_member('@' + channel['channel'], user_id)).status == 'left']
        channels_text = "\n".join([f"‚Ä¢ {channel}" for channel in not_subscribed])
        await callback_query.message.answer(f"‚ùå –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n\n{channels_text}", reply_markup=get_subscription_keyboard())
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "upload_video")
async def start_video_upload(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    await VideoUpload.waiting_for_video.set()
    await callback_query.message.answer("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
    await callback_query.answer()

@dp.message_handler(content_types=['video'], state=VideoUpload.waiting_for_video)
async def process_video_upload(message: types.Message, state: FSMContext):
    try:
        progress_message = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...")
        file_id = message.video.file_id
        file_size = message.video.file_size
        
        if file_size > 1024 * 1024 * 1024:  # 1GB
            await progress_message.edit_text("‚ùå –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1 –ì–ë")
            await state.finish()
            return
            
        test_send = await bot.send_video(chat_id=message.chat.id, video=file_id)
        await test_send.delete()
        
        async with state.proxy() as data:
            data['file_id'] = file_id
            data['file_size'] = file_size
            data['duration'] = message.video.duration
        
        await VideoUpload.waiting_for_description.set()
        await progress_message.edit_text("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
        await message.answer("üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ó–∞–≥–æ–ª–æ–≤–æ–∫\n–û–ø–∏—Å–∞–Ω–∏–µ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.finish()
        
@dp.message_handler(state=VideoUpload.waiting_for_description)
async def process_video_description(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            if 'file_id' not in data:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–Ω–æ–≤–∞.")
                await state.finish()
                return
            
            parts = message.text.strip().split('\n', 1)
            if len(parts) < 2:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π.")
                return
                
            title, description = parts[0].strip(), parts[1].strip()
            if not title:
                await message.answer("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            video_id = f"video_{len(db['videos']) + 1}"
            while video_id in db['videos']:
                video_id = f"video_{int(video_id.split('_')[1]) + 1}"
            
            video_data = {
                'file_id': data['file_id'],
                'title': title,
                'description': description,
                'views': 0,
                'date': datetime.now().strftime("%d.%m.%Y"),
                'size': data.get('file_size', 0),
                'duration': data.get('duration', 0)
            }
            
            db['videos'][video_id] = video_data
            save_data(db)
            
            bot_username = (await bot.me).username
            share_link = f"https://t.me/{bot_username}?start={video_id}"
            
            success_message = f"""
‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!

üìπ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}
üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ ID: {video_id}
‚Ä¢ –†–∞–∑–º–µ—Ä: {data.get('file_size', 0) // (1024 * 1024):.1f} –ú–ë
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data.get('duration', 0)} —Å–µ–∫

üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è: {share_link}
"""
            await message.answer(success_message)
            await bot.send_video(
                chat_id=message.chat.id,
                video=data['file_id'],
                caption=f"üìπ {title}\n\n{description}"
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        await state.finish()

@dp.callback_query_handler(lambda c: c.data == "combine_videos")
async def start_combine_videos(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    await CombineVideos.waiting_for_episode_count.set()
    await callback_query.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ (1-10):")
    await callback_query.answer()

@dp.message_handler(state=CombineVideos.waiting_for_episode_count)
async def process_episode_count(message: types.Message, state: FSMContext):
    try:
        count = int(message.text.strip())
        if count < 1 or count > 10:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10.")
            return
        async with state.proxy() as data:
            data['episode_count'] = count
            data['uploaded_count'] = 0
            data['video_ids'] = []
        await CombineVideos.waiting_for_videos.set()
        await message.answer(f"üìù –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –≤–∏–¥–µ–æ –ø–æ –æ–¥–Ω–æ–º—É. –ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å {count} –≤–∏–¥–µ–æ.")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@dp.message_handler(content_types=['video'], state=CombineVideos.waiting_for_videos)
async def process_combine_video_upload(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        episode_count = data['episode_count']
        uploaded_count = data['uploaded_count']
        video_ids = data['video_ids']
        
        if uploaded_count < episode_count:
            file_id = message.video.file_id
            video_id = f"video_{len(db['videos']) + 1}"
            while video_id in db['videos']:
                video_id = f"video_{int(video_id.split('_')[1]) + 1}"
            
            db['videos'][video_id] = {
                'file_id': file_id,
                'title': f"–≠–ø–∏–∑–æ–¥ {uploaded_count + 1}",
                'description': '',
                'views': 0,
                'date': datetime.now().strftime("%d.%m.%Y"),
                'size': message.video.file_size,
                'duration': message.video.duration
            }
            save_data(db)
            video_ids.append(video_id)
            uploaded_count += 1
            data['uploaded_count'] = uploaded_count
            data['video_ids'] = video_ids
            
            if uploaded_count < episode_count:
                await message.answer(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —ç–ø–∏–∑–æ–¥ {uploaded_count}. –û—Å—Ç–∞–ª–æ—Å—å {episode_count - uploaded_count} —ç–ø–∏–∑–æ–¥–æ–≤.")
            else:
                await message.answer(f"‚úÖ –í—Å–µ {episode_count} —ç–ø–∏–∑–æ–¥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
                await CombineVideos.waiting_for_title.set()
                await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –≤–∏–¥–µ–æ")
        else:
            await message.answer("‚ùå –í—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –≤—Å–µ —ç–ø–∏–∑–æ–¥—ã.")

@dp.message_handler(state=CombineVideos.waiting_for_title)
async def process_combine_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['title'] = message.text.strip()
        video_ids = data['video_ids']
        episode_count = data['episode_count']
        
        combined_id = f"combined_{len(db['combined_videos']) + 1}"
        while combined_id in db['combined_videos']:
            combined_id = f"combined_{int(combined_id.split('_')[1]) + 1}"
        
        db['combined_videos'][combined_id] = {
            'title': data['title'],
            'video_ids': video_ids,
            'episode_count': episode_count,
            'date': datetime.now().strftime("%d.%m.%Y")
        }
        save_data(db)
        
        bot_username = (await bot.me).username
        share_link = f"https://t.me/{bot_username}?start={combined_id}"
        await message.answer(f"‚úÖ –ù–∞–±–æ—Ä —Å–æ–∑–¥–∞–Ω!\n\nüîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è: {share_link}")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith("show_ep_"))
async def process_episode_selection(callback_query: types.CallbackQuery):
    try:
        parts = callback_query.data.split('_')
        if len(parts) < 4:
            await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        combined_id = f"combined_{parts[2]}"
        episode_num = int(parts[3])
        
        logging.info(f"Processing combined_id: {combined_id}, episode: {episode_num}")
        
        combined_data = db['combined_videos'].get(combined_id)
        if not combined_data:
            await callback_query.answer("–ù–∞–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        if episode_num < 1 or episode_num > len(combined_data['video_ids']):
            await callback_query.answer("–≠–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        video_id = combined_data['video_ids'][episode_num - 1]
        video_data = db['videos'].get(video_id)
        
        if not video_data:
            await callback_query.answer("–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        await bot.send_video(
            chat_id=callback_query.message.chat.id,
            video=video_data['file_id'],
            caption=f"üìπ {combined_data['title']} - –≠–ø–∏–∑–æ–¥ {episode_num}\n\n{video_data.get('description', '')}",
            parse_mode="HTML",
            protect_content=True
        )
        
        video_data['views'] = video_data.get('views', 0) + 1
        save_data(db)
        
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞: {e}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏")
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.callback_query_handler(lambda c: c.data == "add_update")
async def start_update_post(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    await UpdatePost.waiting_for_version.set()
    await callback_query.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.0.0)")
    await callback_query.answer()

@dp.message_handler(state=UpdatePost.waiting_for_version)
async def process_update_version(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['version'] = message.text.strip()
    await UpdatePost.waiting_for_description.set()
    await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

@dp.message_handler(state=UpdatePost.waiting_for_description)
async def process_update_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text.strip()
        data['date'] = datetime.now().strftime("%d.%m.%Y")
        preview = format_update_message(data)
    
    await UpdatePost.waiting_for_confirmation.set()
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_update"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_update")
    )
    await message.answer(f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n{preview}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?", reply_markup=keyboard, parse_mode="Markdown")

@dp.callback_query_handler(lambda c: c.data in ["confirm_update", "cancel_update"], state=UpdatePost.waiting_for_confirmation)
async def process_update_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "confirm_update":
        async with state.proxy() as data:
            update_data = {
                'version': data['version'],
                'description': data['description'],
                'date': data['date']
            }
            db['updates'].append(update_data)
            save_data(db)
            await callback_query.message.edit_text("‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
            await broadcast_update(update_data)
            await callback_query.message.edit_text("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
    else:
        await callback_query.message.edit_text("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "show_updates")
async def show_updates(callback_query: types.CallbackQuery):
    if not db['updates']:
        await callback_query.message.edit_text(
            "üìã –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—É—Å—Ç–∞",
            reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
        )
        return
        
    updates_text = "üìã –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:\n\n"
    for update in reversed(db['updates']):
        updates_text += f"""
üìÖ {update['date']}
üì¶ –í–µ—Ä—Å–∏—è {update['version']}
üìù {update['description']}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
    
    keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    await callback_query.message.edit_text(updates_text, reply_markup=keyboard)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "report_bug")
async def start_bug_report(callback_query: types.CallbackQuery):
    await BugReport.waiting_for_description.set()
    await callback_query.message.answer("üêû –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ")
    await callback_query.answer()

@dp.message_handler(state=BugReport.waiting_for_description)
async def process_bug_report(message: types.Message, state: FSMContext):
    report_text = f"""
üêû –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ!

–û—Ç: {message.from_user.full_name} (@{message.from_user.username})
ID: {message.from_user.id}
–î–∞—Ç–∞: {datetime.now().strftime("%d.%m.%Y %H:%M")}

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
{message.text}
"""
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, report_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback_query: types.CallbackQuery):
    if is_admin(callback_query.from_user.id):
        await callback_query.message.edit_text("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())
    else:
        await callback_query.message.edit_text("üé¨ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_user_keyboard())
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "stats")
async def show_statistics(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    total_videos = len(db['videos'])
    total_views = sum(video.get('views', 0) for video in db['videos'].values())
    total_users = len(db['users'])
    active_users = sum(1 for user in db['users'].values() if not user.get('is_banned', False))
    total_size = sum(video.get('size', 0) for video in db['videos'].values())
    total_duration = sum(video.get('duration', 0) for video in db['videos'].values())

    stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_users}
‚Ä¢ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ: {total_users - active_users}

üìπ **–í–∏–¥–µ–æ:**
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_videos}
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {total_views}
‚Ä¢ –†–∞–∑–º–µ—Ä: {total_size // (1024 * 1024 * 1024):.1f} –ì–ë
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration // 3600}—á {(total_duration % 3600) // 60}–º

üîù **–¢–æ–ø-5 –≤–∏–¥–µ–æ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º:**
"""
    sorted_videos = sorted(db['videos'].items(), key=lambda x: x[1].get('views', 0), reverse=True)[:5]
    for video_id, video in sorted_videos:
        stats_text += f"""
‚Ä¢ {video.get('title', '')}
üëÅ {video.get('views', 0)} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
ID: {video_id}
"""
    keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    await callback_query.message.edit_text(stats_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentTypes.ANY, state="*")
async def unknown_message(message: types.Message, state: FSMContext):
    await state.finish()
    if is_admin(message.from_user.id):
        await message.answer("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())
    else:
        is_subscribed = await check_subscriptions(message.from_user.id)
        if not is_subscribed:
            await message.answer("‚ùå –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:", reply_markup=get_subscription_keyboard())
        else:
            await message.answer("üé¨ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_user_keyboard())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup(dp):
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, "üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)        